{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nimport { GraphQLSitemapService, DisconnectedSitemapService } from '@sitecore-jss/sitecore-jss-nextjs';\nimport config from 'temp/config';\nimport { config as packageConfig } from '../../package.json';\nexport class SitecoreSitemapFetcher {\n  constructor() {\n    _defineProperty(this, \"_graphqlSitemapService\", void 0);\n\n    _defineProperty(this, \"_disconnectedSitemapService\", void 0);\n\n    this._graphqlSitemapService = new GraphQLSitemapService({\n      endpoint: config.graphQLEndpoint,\n      apiKey: config.sitecoreApiKey,\n      siteName: config.jssAppName\n      /*\r\n      The Sitemap Service needs a root item ID in order to fetch the list of pages for the current\r\n      app. If your Sitecore instance only has 1 JSS App, you can specify the root item ID here;\r\n      otherwise, the service will attempt to figure out the root item for the current JSS App using GraphQL and app name.\r\n      rootItemId: '{GUID}'\r\n      */\n\n    });\n    this._disconnectedSitemapService = new DisconnectedSitemapService(this.getManifest());\n  }\n  /**\r\n   * Get sitecore-import.json manifest\r\n   */\n\n\n  getManifest() {\n    if (process.env.JSS_MODE !== 'disconnected') return null;\n\n    try {\n      const manifest = require('sitecore/manifest/sitecore-import.json');\n\n      return manifest;\n    } catch (error) {\n      throw Error(\"[Disconnected Export] Please make sure you've started the disconnected proxy `npm run start:disconnected-proxy`\");\n    }\n  }\n  /**\r\n   * Generates SitecoreSitemap for given mode (Export / Disconnected Export / SSG)\r\n   * @param {GetStaticPathsContext} context\r\n   */\n\n\n  async fetch(context) {\n    // If we are in Export/Disconnected Export mode\n    if (process.env.EXPORT_MODE) {\n      return process.env.JSS_MODE === 'disconnected' ? this._disconnectedSitemapService.fetchExportSitemap() : this._graphqlSitemapService.fetchExportSitemap(packageConfig.language);\n    }\n\n    return this._graphqlSitemapService.fetchSSGSitemap((context === null || context === void 0 ? void 0 : context.locales) || []);\n  }\n\n}\nexport const sitemapFetcher = new SitecoreSitemapFetcher();","map":null,"metadata":{},"sourceType":"module"}