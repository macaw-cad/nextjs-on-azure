{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ComponentPropsService, editingDataService } from '@sitecore-jss/sitecore-jss-nextjs';\nimport { dictionaryServiceFactory } from 'lib/dictionary-service-factory';\nimport { layoutServiceFactory } from 'lib/layout-service-factory';\nimport { componentModule } from 'temp/componentFactory';\nimport { config as packageConfig } from '../../package.json';\n/**\r\n * Extract normalized Sitecore item path from query\r\n * @param {ParsedUrlQuery | undefined} params\r\n */\n\nfunction extractPath(params) {\n  var _params$path;\n\n  if (params === undefined) {\n    return '/';\n  }\n\n  let path = Array.isArray(params.path) ? params.path.join('/') : (_params$path = params.path) !== null && _params$path !== void 0 ? _params$path : '/'; // Ensure leading '/'\n\n  if (!path.startsWith('/')) {\n    path = '/' + path;\n  }\n\n  return path;\n}\n/**\r\n * Determines whether context is GetServerSidePropsContext (SSR) or GetStaticPropsContext (SSG)\r\n * @param {GetServerSidePropsContext | GetStaticPropsContext} context\r\n */\n\n\nconst isServerSidePropsContext = function (context) {\n  return context.req !== undefined;\n};\n\nexport class SitecorePagePropsFactory {\n  constructor() {\n    _defineProperty(this, \"componentPropsService\", void 0);\n\n    _defineProperty(this, \"dictionaryService\", void 0);\n\n    _defineProperty(this, \"layoutService\", void 0);\n\n    this.componentPropsService = new ComponentPropsService();\n    this.dictionaryService = dictionaryServiceFactory.create();\n    this.layoutService = layoutServiceFactory.create();\n  }\n  /**\r\n   * Create SitecorePageProps for given context (SSR / GetServerSidePropsContext or SSG / GetStaticPropsContext)\r\n   * @param {GetServerSidePropsContext | GetStaticPropsContext} context\r\n   * @see SitecorePageProps\r\n   */\n\n\n  async create(context) {\n    var _layoutData, _layoutData$sitecore;\n\n    let locale,\n        layoutData,\n        dictionary,\n        componentProps = {},\n        notFound = false;\n\n    if (context.preview) {\n      /**\r\n       * Preview mode\r\n       */\n      // If we're in preview (editing) mode, use data already sent along with the editing request\n      const data = await editingDataService.getEditingData(context.previewData);\n\n      if (!data) {\n        throw new Error(`Unable to get editing data for preview ${JSON.stringify(context.previewData)}`);\n      }\n\n      locale = data.language;\n      layoutData = data.layoutData;\n      dictionary = data.dictionary;\n    } else {\n      var _context$locale;\n\n      /**\r\n       * Normal mode\r\n       */\n      // Get normalized Sitecore item path\n      const path = extractPath(context.params); // Use context locale if Next.js i18n is configured, otherwise use language defined in package.json\n\n      locale = (_context$locale = context.locale) !== null && _context$locale !== void 0 ? _context$locale : packageConfig.language; // Fetch layout data, passing on req/res for SSR\n\n      layoutData = await this.layoutService.fetchLayoutData(path, locale, // eslint-disable-next-line prettier/prettier\n      isServerSidePropsContext(context) ? context.req : undefined, isServerSidePropsContext(context) ? context.res : undefined);\n\n      if (!layoutData.sitecore.route) {\n        // A missing route value signifies an invalid path, so set notFound.\n        // Our page routes will return this in getStatic/ServerSideProps,\n        // which will trigger our custom 404 page with proper 404 status code.\n        // You could perform additional logging here to track these if desired.\n        notFound = true;\n      } // Fetch dictionary data\n\n\n      dictionary = await this.dictionaryService.fetchDictionaryData(locale);\n    } // Retrieve component props using side-effects defined on components level\n\n\n    if ((_layoutData = layoutData) === null || _layoutData === void 0 ? void 0 : (_layoutData$sitecore = _layoutData.sitecore) === null || _layoutData$sitecore === void 0 ? void 0 : _layoutData$sitecore.route) {\n      if (isServerSidePropsContext(context)) {\n        componentProps = await this.componentPropsService.fetchServerSideComponentProps({\n          layoutData: layoutData,\n          context,\n          componentModule\n        });\n      } else {\n        componentProps = await this.componentPropsService.fetchStaticComponentProps({\n          layoutData: layoutData,\n          context,\n          componentModule\n        });\n      }\n    }\n\n    return {\n      locale,\n      layoutData,\n      dictionary,\n      componentProps,\n      notFound\n    };\n  }\n\n}\nexport const sitecorePagePropsFactory = new SitecorePagePropsFactory();","map":{"version":3,"sources":["D:/projects/jss/nextjsonazure/packages/jss-nextjs-app-new/src/lib/page-props-factory.ts"],"names":["ComponentPropsService","editingDataService","dictionaryServiceFactory","layoutServiceFactory","componentModule","config","packageConfig","extractPath","params","undefined","path","Array","isArray","join","startsWith","isServerSidePropsContext","context","req","SitecorePagePropsFactory","constructor","componentPropsService","dictionaryService","create","layoutService","locale","layoutData","dictionary","componentProps","notFound","preview","data","getEditingData","previewData","Error","JSON","stringify","language","fetchLayoutData","res","sitecore","route","fetchDictionaryData","fetchServerSideComponentProps","fetchStaticComponentProps","sitecorePagePropsFactory"],"mappings":"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","sourcesContent":["import { ParsedUrlQuery } from 'querystring';\r\nimport { GetServerSidePropsContext, GetStaticPropsContext } from 'next';\r\nimport {\r\n  ComponentPropsService,\r\n  DictionaryPhrases,\r\n  DictionaryService,\r\n  LayoutServiceData,\r\n  LayoutService,\r\n  editingDataService,\r\n} from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport { SitecorePageProps } from 'lib/page-props';\r\nimport { dictionaryServiceFactory } from 'lib/dictionary-service-factory';\r\nimport { layoutServiceFactory } from 'lib/layout-service-factory';\r\nimport { componentModule } from 'temp/componentFactory';\r\nimport { config as packageConfig } from '../../package.json';\r\n\r\n/**\r\n * Extract normalized Sitecore item path from query\r\n * @param {ParsedUrlQuery | undefined} params\r\n */\r\nfunction extractPath(params: ParsedUrlQuery | undefined): string {\r\n  if (params === undefined) {\r\n    return '/';\r\n  }\r\n  let path = Array.isArray(params.path) ? params.path.join('/') : params.path ?? '/';\r\n\r\n  // Ensure leading '/'\r\n  if (!path.startsWith('/')) {\r\n    path = '/' + path;\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\n/**\r\n * Determines whether context is GetServerSidePropsContext (SSR) or GetStaticPropsContext (SSG)\r\n * @param {GetServerSidePropsContext | GetStaticPropsContext} context\r\n */\r\nconst isServerSidePropsContext = function (\r\n  context: GetServerSidePropsContext | GetStaticPropsContext\r\n): context is GetServerSidePropsContext {\r\n  return (<GetServerSidePropsContext>context).req !== undefined;\r\n};\r\n\r\nexport class SitecorePagePropsFactory {\r\n  private componentPropsService: ComponentPropsService;\r\n  private dictionaryService: DictionaryService;\r\n  private layoutService: LayoutService;\r\n\r\n  constructor() {\r\n    this.componentPropsService = new ComponentPropsService();\r\n    this.dictionaryService = dictionaryServiceFactory.create();\r\n    this.layoutService = layoutServiceFactory.create();\r\n  }\r\n\r\n  /**\r\n   * Create SitecorePageProps for given context (SSR / GetServerSidePropsContext or SSG / GetStaticPropsContext)\r\n   * @param {GetServerSidePropsContext | GetStaticPropsContext} context\r\n   * @see SitecorePageProps\r\n   */\r\n  public async create(\r\n    context: GetServerSidePropsContext | GetStaticPropsContext\r\n  ): Promise<SitecorePageProps> {\r\n    let locale: string,\r\n      layoutData: LayoutServiceData | null,\r\n      dictionary: DictionaryPhrases,\r\n      componentProps = {},\r\n      notFound = false;\r\n\r\n    if (context.preview) {\r\n      /**\r\n       * Preview mode\r\n       */\r\n      // If we're in preview (editing) mode, use data already sent along with the editing request\r\n      const data = await editingDataService.getEditingData(context.previewData);\r\n      if (!data) {\r\n        throw new Error(\r\n          `Unable to get editing data for preview ${JSON.stringify(context.previewData)}`\r\n        );\r\n      }\r\n      locale = data.language;\r\n      layoutData = data.layoutData;\r\n      dictionary = data.dictionary;\r\n    } else {\r\n      /**\r\n       * Normal mode\r\n       */\r\n      // Get normalized Sitecore item path\r\n      const path = extractPath(context.params);\r\n\r\n      // Use context locale if Next.js i18n is configured, otherwise use language defined in package.json\r\n      locale = context.locale ?? packageConfig.language;\r\n\r\n      // Fetch layout data, passing on req/res for SSR\r\n      layoutData = await this.layoutService.fetchLayoutData(\r\n        path,\r\n        locale,\r\n        // eslint-disable-next-line prettier/prettier\r\n        isServerSidePropsContext(context) ? (context as GetServerSidePropsContext).req : undefined,\r\n        isServerSidePropsContext(context) ? (context as GetServerSidePropsContext).res : undefined\r\n      );\r\n\r\n      if (!layoutData.sitecore.route) {\r\n        // A missing route value signifies an invalid path, so set notFound.\r\n        // Our page routes will return this in getStatic/ServerSideProps,\r\n        // which will trigger our custom 404 page with proper 404 status code.\r\n        // You could perform additional logging here to track these if desired.\r\n        notFound = true;\r\n      }\r\n\r\n      // Fetch dictionary data\r\n      dictionary = await this.dictionaryService.fetchDictionaryData(locale);\r\n    }\r\n\r\n    // Retrieve component props using side-effects defined on components level\r\n    if (layoutData?.sitecore?.route) {\r\n      if (isServerSidePropsContext(context)) {\r\n        componentProps = await this.componentPropsService.fetchServerSideComponentProps({\r\n          layoutData: layoutData,\r\n          context,\r\n          componentModule,\r\n        });\r\n      } else {\r\n        componentProps = await this.componentPropsService.fetchStaticComponentProps({\r\n          layoutData: layoutData,\r\n          context,\r\n          componentModule,\r\n        });\r\n      }\r\n    }\r\n    return {\r\n      locale,\r\n      layoutData,\r\n      dictionary,\r\n      componentProps,\r\n      notFound,\r\n    };\r\n  }\r\n}\r\n\r\nexport const sitecorePagePropsFactory = new SitecorePagePropsFactory();\r\n"]},"metadata":{},"sourceType":"module"}