{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ComponentPropsService, editingDataService } from '@sitecore-jss/sitecore-jss-nextjs';\nimport { dictionaryServiceFactory } from 'lib/dictionary-service-factory';\nimport { layoutServiceFactory } from 'lib/layout-service-factory';\nimport { componentModule } from 'temp/componentFactory';\nimport { config as packageConfig } from '../../package.json';\n/**\r\n * Extract normalized Sitecore item path from query\r\n * @param {ParsedUrlQuery | undefined} params\r\n */\n\nfunction extractPath(params) {\n  var _params$path;\n\n  if (params === undefined) {\n    return '/';\n  }\n\n  let path = Array.isArray(params.path) ? params.path.join('/') : (_params$path = params.path) !== null && _params$path !== void 0 ? _params$path : '/'; // Ensure leading '/'\n\n  if (!path.startsWith('/')) {\n    path = '/' + path;\n  }\n\n  return path;\n}\n/**\r\n * Determines whether context is GetServerSidePropsContext (SSR) or GetStaticPropsContext (SSG)\r\n * @param {GetServerSidePropsContext | GetStaticPropsContext} context\r\n */\n\n\nconst isServerSidePropsContext = function (context) {\n  return context.req !== undefined;\n};\n\nexport class SitecorePagePropsFactory {\n  constructor() {\n    _defineProperty(this, \"componentPropsService\", void 0);\n\n    _defineProperty(this, \"dictionaryService\", void 0);\n\n    _defineProperty(this, \"layoutService\", void 0);\n\n    this.componentPropsService = new ComponentPropsService();\n    this.dictionaryService = dictionaryServiceFactory.create();\n    this.layoutService = layoutServiceFactory.create();\n  }\n  /**\r\n   * Create SitecorePageProps for given context (SSR / GetServerSidePropsContext or SSG / GetStaticPropsContext)\r\n   * @param {GetServerSidePropsContext | GetStaticPropsContext} context\r\n   * @see SitecorePageProps\r\n   */\n\n\n  async create(context) {\n    var _layoutData, _layoutData$sitecore;\n\n    let locale,\n        layoutData,\n        dictionary,\n        componentProps = {},\n        notFound = false;\n\n    if (context.preview) {\n      /**\r\n       * Preview mode\r\n       */\n      // If we're in preview (editing) mode, use data already sent along with the editing request\n      const data = await editingDataService.getEditingData(context.previewData);\n\n      if (!data) {\n        throw new Error(`Unable to get editing data for preview ${JSON.stringify(context.previewData)}`);\n      }\n\n      locale = data.language;\n      layoutData = data.layoutData;\n      dictionary = data.dictionary;\n    } else {\n      var _context$locale;\n\n      /**\r\n       * Normal mode\r\n       */\n      // Get normalized Sitecore item path\n      const path = extractPath(context.params); // Use context locale if Next.js i18n is configured, otherwise use language defined in package.json\n\n      locale = (_context$locale = context.locale) !== null && _context$locale !== void 0 ? _context$locale : packageConfig.language; // Fetch layout data, passing on req/res for SSR\n\n      layoutData = await this.layoutService.fetchLayoutData(path, locale, // eslint-disable-next-line prettier/prettier\n      isServerSidePropsContext(context) ? context.req : undefined, isServerSidePropsContext(context) ? context.res : undefined);\n\n      if (!layoutData.sitecore.route) {\n        // A missing route value signifies an invalid path, so set notFound.\n        // Our page routes will return this in getStatic/ServerSideProps,\n        // which will trigger our custom 404 page with proper 404 status code.\n        // You could perform additional logging here to track these if desired.\n        notFound = true;\n      } // Fetch dictionary data\n\n\n      dictionary = await this.dictionaryService.fetchDictionaryData(locale);\n    } // Retrieve component props using side-effects defined on components level\n\n\n    if ((_layoutData = layoutData) === null || _layoutData === void 0 ? void 0 : (_layoutData$sitecore = _layoutData.sitecore) === null || _layoutData$sitecore === void 0 ? void 0 : _layoutData$sitecore.route) {\n      if (isServerSidePropsContext(context)) {\n        componentProps = await this.componentPropsService.fetchServerSideComponentProps({\n          layoutData: layoutData,\n          context,\n          componentModule\n        });\n      } else {\n        componentProps = await this.componentPropsService.fetchStaticComponentProps({\n          layoutData: layoutData,\n          context,\n          componentModule\n        });\n      }\n    }\n\n    return {\n      locale,\n      layoutData,\n      dictionary,\n      componentProps,\n      notFound\n    };\n  }\n\n}\nexport const sitecorePagePropsFactory = new SitecorePagePropsFactory();","map":null,"metadata":{},"sourceType":"module"}