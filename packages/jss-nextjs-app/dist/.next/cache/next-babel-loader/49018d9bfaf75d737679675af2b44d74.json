{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\projects\\\\jss\\\\nextjsonazure\\\\packages\\\\jss-nextjs-app\\\\src\\\\pages\\\\[[...path]].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from 'react';\nimport NotFound from 'src/NotFound';\nimport Layout from 'src/Layout';\nimport { SitecoreContext, ComponentPropsContext, handleExperienceEditorFastRefresh } from '@sitecore-jss/sitecore-jss-nextjs';\nimport { sitecorePagePropsFactory } from 'lib/page-props-factory';\nimport { componentFactory } from 'temp/componentFactory';\nimport { sitemapFetcher } from 'lib/sitemap-fetcher';\n\nconst SitecorePage = ({\n  notFound,\n  layoutData,\n  componentProps\n}) => {\n  var _layoutData$sitecore, _layoutData$sitecore$;\n\n  useEffect(() => {\n    // Since Experience Editor does not support Fast Refresh need to refresh EE chromes after Fast Refresh finished\n    handleExperienceEditorFastRefresh();\n  }, []);\n\n  if (notFound || !(layoutData === null || layoutData === void 0 ? void 0 : (_layoutData$sitecore = layoutData.sitecore) === null || _layoutData$sitecore === void 0 ? void 0 : _layoutData$sitecore.route)) {\n    // Shouldn't hit this (as long as 'notFound' is being returned below), but just to be safe\n    return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  const context = _objectSpread({\n    route: layoutData.sitecore.route,\n    itemId: (_layoutData$sitecore$ = layoutData.sitecore.route) === null || _layoutData$sitecore$ === void 0 ? void 0 : _layoutData$sitecore$.itemId\n  }, layoutData.sitecore.context);\n\n  return /*#__PURE__*/_jsxDEV(ComponentPropsContext, {\n    value: componentProps,\n    children: /*#__PURE__*/_jsxDEV(SitecoreContext, {\n      componentFactory: componentFactory,\n      context: context,\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        context: context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}; // This function gets called at build and export time to determine\n// pages for SSG (\"paths\", as tokenized array).\n\n\nexport const getStaticPaths = async context => {\n  // Fallback, along with revalidate in getStaticProps (below),\n  // enables Incremental Static Regeneration. This allows us to\n  // leave certain (or all) paths empty if desired and static pages\n  // will be generated on request (development mode in this example).\n  // Alternatively, the entire sitemap could be pre-rendered\n  // ahead of time (non-development mode in this example).\n  // See https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration\n  if (false) {\n    // Note: Next.js runs export in production mode\n    const paths = await sitemapFetcher.fetch(context);\n    return {\n      paths,\n      fallback: process.env.EXPORT_MODE ? false : 'blocking'\n    };\n  }\n\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}; // This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation (or fallback) is enabled and a new request comes in.\n\nexport const getStaticProps = async context => {\n  console.error(\"context\", context);\n  const props = await sitecorePagePropsFactory.create(context);\n  return {\n    props,\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 5 seconds\n    revalidate: 5,\n    // In seconds\n    notFound: props.notFound // Returns custom 404 page with a status code of 404 when true\n\n  };\n};\nexport default SitecorePage;","map":{"version":3,"sources":["D:/projects/jss/nextjsonazure/packages/jss-nextjs-app/src/pages/[[...path]].tsx"],"names":["useEffect","NotFound","Layout","SitecoreContext","ComponentPropsContext","handleExperienceEditorFastRefresh","sitecorePagePropsFactory","componentFactory","sitemapFetcher","SitecorePage","notFound","layoutData","componentProps","sitecore","route","context","itemId","getStaticPaths","paths","fetch","fallback","process","env","EXPORT_MODE","getStaticProps","console","error","props","create","revalidate"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SACEC,eADF,EAEEC,qBAFF,EAGEC,iCAHF,QAIO,mCAJP;AAOA,SAASC,wBAAT,QAAyC,wBAAzC;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,cAAT,QAA+B,qBAA/B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,UAAZ;AAAwBC,EAAAA;AAAxB,CAAD,KAA8E;AAAA;;AACjGZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACAK,IAAAA,iCAAiC;AAClC,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAIK,QAAQ,IAAI,EAACC,UAAD,aAACA,UAAD,+CAACA,UAAU,CAAEE,QAAb,yDAAC,qBAAsBC,KAAvB,CAAhB,EAA8C;AAC5C;AACA,wBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMC,OAAuC;AAC3CD,IAAAA,KAAK,EAAEH,UAAU,CAACE,QAAX,CAAoBC,KADgB;AAE3CE,IAAAA,MAAM,2BAAEL,UAAU,CAACE,QAAX,CAAoBC,KAAtB,0DAAE,sBAA2BE;AAFQ,KAGxCL,UAAU,CAACE,QAAX,CAAoBE,OAHoB,CAA7C;;AAMA,sBACE,QAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEH,cAA9B;AAAA,2BACE,QAAC,eAAD;AACE,MAAA,gBAAgB,EAAEL,gBADpB;AAEE,MAAA,OAAO,EAAEQ,OAFX;AAAA,6BAIE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA3BD,C,CA6BA;AACA;;;AACA,OAAO,MAAME,cAA8B,GAAG,MAAOF,OAAP,IAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,aAA4C;AAC1C;AACA,UAAMG,KAAK,GAAG,MAAMV,cAAc,CAACW,KAAf,CAAqBJ,OAArB,CAApB;AAEA,WAAO;AACLG,MAAAA,KADK;AAELE,MAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,WAAZ,GAA0B,KAA1B,GAAkC;AAFvC,KAAP;AAID;;AAED,SAAO;AACLL,IAAAA,KAAK,EAAE,EADF;AAELE,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,MAAMI,cAA8B,GAAG,MAAOT,OAAP,IAAmB;AAC/DU,EAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBX,OAAzB;AACA,QAAMY,KAAK,GAAG,MAAMrB,wBAAwB,CAACsB,MAAzB,CAAgCb,OAAhC,CAApB;AAEA,SAAO;AACLY,IAAAA,KADK;AAEL;AACA;AACA;AACAE,IAAAA,UAAU,EAAE,CALP;AAKU;AACfnB,IAAAA,QAAQ,EAAEiB,KAAK,CAACjB,QANX,CAMqB;;AANrB,GAAP;AAQD,CAZM;AAcP,eAAeD,YAAf","sourcesContent":["import { useEffect } from 'react';\r\nimport { GetStaticPaths, GetStaticProps } from 'next';\r\nimport NotFound from 'src/NotFound';\r\nimport Layout from 'src/Layout';\r\nimport {\r\n  SitecoreContext,\r\n  ComponentPropsContext,\r\n  handleExperienceEditorFastRefresh,\r\n} from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport { StyleguideSitecoreContextValue } from 'lib/component-props';\r\nimport { SitecorePageProps } from 'lib/page-props';\r\nimport { sitecorePagePropsFactory } from 'lib/page-props-factory';\r\nimport { componentFactory } from 'temp/componentFactory';\r\nimport { sitemapFetcher } from 'lib/sitemap-fetcher';\r\n\r\nconst SitecorePage = ({ notFound, layoutData, componentProps }: SitecorePageProps): JSX.Element => {\r\n  useEffect(() => {\r\n    // Since Experience Editor does not support Fast Refresh need to refresh EE chromes after Fast Refresh finished\r\n    handleExperienceEditorFastRefresh();\r\n  }, []);\r\n\r\n  if (notFound || !layoutData?.sitecore?.route) {\r\n    // Shouldn't hit this (as long as 'notFound' is being returned below), but just to be safe\r\n    return <NotFound />;\r\n  }\r\n\r\n  const context: StyleguideSitecoreContextValue = {\r\n    route: layoutData.sitecore.route,\r\n    itemId: layoutData.sitecore.route?.itemId,\r\n    ...layoutData.sitecore.context,\r\n  };\r\n\r\n  return (\r\n    <ComponentPropsContext value={componentProps}>\r\n      <SitecoreContext<StyleguideSitecoreContextValue>\r\n        componentFactory={componentFactory}\r\n        context={context}\r\n      >\r\n        <Layout context={context} />\r\n      </SitecoreContext>\r\n    </ComponentPropsContext>\r\n  );\r\n};\r\n\r\n// This function gets called at build and export time to determine\r\n// pages for SSG (\"paths\", as tokenized array).\r\nexport const getStaticPaths: GetStaticPaths = async (context) => {\r\n  // Fallback, along with revalidate in getStaticProps (below),\r\n  // enables Incremental Static Regeneration. This allows us to\r\n  // leave certain (or all) paths empty if desired and static pages\r\n  // will be generated on request (development mode in this example).\r\n  // Alternatively, the entire sitemap could be pre-rendered\r\n  // ahead of time (non-development mode in this example).\r\n  // See https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration\r\n\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    // Note: Next.js runs export in production mode\r\n    const paths = await sitemapFetcher.fetch(context);\r\n\r\n    return {\r\n      paths,\r\n      fallback: process.env.EXPORT_MODE ? false : 'blocking',\r\n    };\r\n  }\r\n\r\n  return {\r\n    paths: [],\r\n    fallback: 'blocking',\r\n  };\r\n};\r\n\r\n// This function gets called at build time on server-side.\r\n// It may be called again, on a serverless function, if\r\n// revalidation (or fallback) is enabled and a new request comes in.\r\nexport const getStaticProps: GetStaticProps = async (context) => {\r\n  console.error(\"context\", context);\r\n  const props = await sitecorePagePropsFactory.create(context);\r\n\r\n  return {\r\n    props,\r\n    // Next.js will attempt to re-generate the page:\r\n    // - When a request comes in\r\n    // - At most once every 5 seconds\r\n    revalidate: 5, // In seconds\r\n    notFound: props.notFound, // Returns custom 404 page with a status code of 404 when true\r\n  };\r\n};\r\n\r\nexport default SitecorePage;\r\n"]},"metadata":{},"sourceType":"module"}