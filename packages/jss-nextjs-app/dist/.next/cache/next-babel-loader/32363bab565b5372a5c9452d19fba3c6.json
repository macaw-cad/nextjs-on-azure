{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from 'react';\nimport NotFound from 'src/NotFound';\nimport Layout from 'src/Layout';\nimport { SitecoreContext, ComponentPropsContext, handleExperienceEditorFastRefresh } from '@sitecore-jss/sitecore-jss-nextjs';\nimport { sitecorePagePropsFactory } from 'lib/page-props-factory';\nimport { componentFactory } from 'temp/componentFactory';\nimport { sitemapFetcher } from 'lib/sitemap-fetcher';\n\nconst SitecorePage = ({\n  notFound,\n  layoutData,\n  componentProps\n}) => {\n  var _layoutData$sitecore, _layoutData$sitecore$;\n\n  useEffect(() => {\n    // Since Experience Editor does not support Fast Refresh need to refresh EE chromes after Fast Refresh finished\n    handleExperienceEditorFastRefresh();\n  }, []);\n\n  if (notFound || !(layoutData === null || layoutData === void 0 ? void 0 : (_layoutData$sitecore = layoutData.sitecore) === null || _layoutData$sitecore === void 0 ? void 0 : _layoutData$sitecore.route)) {\n    // Shouldn't hit this (as long as 'notFound' is being returned below), but just to be safe\n    return /*#__PURE__*/_jsx(NotFound, {});\n  }\n\n  const context = _objectSpread({\n    route: layoutData.sitecore.route,\n    itemId: (_layoutData$sitecore$ = layoutData.sitecore.route) === null || _layoutData$sitecore$ === void 0 ? void 0 : _layoutData$sitecore$.itemId\n  }, layoutData.sitecore.context);\n\n  return /*#__PURE__*/_jsx(ComponentPropsContext, {\n    value: componentProps,\n    children: /*#__PURE__*/_jsx(SitecoreContext, {\n      componentFactory: componentFactory,\n      context: context,\n      children: /*#__PURE__*/_jsx(Layout, {\n        context: context\n      })\n    })\n  });\n}; // This function gets called at build and export time to determine\n// pages for SSG (\"paths\", as tokenized array).\n\n\nexport const getStaticPaths = async context => {\n  // Fallback, along with revalidate in getStaticProps (below),\n  // enables Incremental Static Regeneration. This allows us to\n  // leave certain (or all) paths empty if desired and static pages\n  // will be generated on request (development mode in this example).\n  // Alternatively, the entire sitemap could be pre-rendered\n  // ahead of time (non-development mode in this example).\n  // See https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration\n  if (true) {\n    // Note: Next.js runs export in production mode\n    const paths = await sitemapFetcher.fetch(context);\n    return {\n      paths,\n      fallback: process.env.EXPORT_MODE ? false : 'blocking'\n    };\n  }\n\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}; // This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation (or fallback) is enabled and a new request comes in.\n\nexport const getStaticProps = async context => {\n  const props = await sitecorePagePropsFactory.create(context);\n  return {\n    props,\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 5 seconds\n    revalidate: 5,\n    // In seconds\n    notFound: props.notFound // Returns custom 404 page with a status code of 404 when true\n\n  };\n};\nexport default SitecorePage;","map":null,"metadata":{},"sourceType":"module"}