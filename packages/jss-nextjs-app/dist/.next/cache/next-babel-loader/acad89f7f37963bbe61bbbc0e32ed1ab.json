{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { withPlaceholder, withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-nextjs';\nimport StyleguideSpecimen from './Styleguide-Specimen';\n\n/**\r\n * Demonstrates advanced component techniques in JSS.\r\n * This example implements a simple-looking tabs component.\r\n * Each tab is itself a child component added to a placeholder defined on the tabs component.\r\n * The tab component introspects its child components to render the tab headings (i.e. the tab children render partial content in two places).\r\n * When this component is edited in Sitecore Experience Editor, the tabbing behavior is turned off and each tab stacks on top of each other\r\n * for easy inline editing.\r\n */\nclass StyleguideLayoutTabs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTabIndex: 0\n    };\n    this.setActiveTab = this.setActiveTab.bind(this);\n  }\n\n  setActiveTab(index) {\n    this.setState({\n      activeTabIndex: index\n    });\n  }\n\n  render() {\n    const {\n      tabsPlaceholder,\n      sitecoreContext\n    } = this.props;\n    let validTabIndex = 0;\n    const isEditing = sitecoreContext && sitecoreContext.pageEditing;\n    return /*#__PURE__*/_jsxs(StyleguideSpecimen, _objectSpread(_objectSpread({}, this.props), {}, {\n      e2eId: \"styleguide-layout-tabs\",\n      children: [/*#__PURE__*/_jsx(\"ul\", {\n        className: \"nav nav-tabs\",\n        children: !isEditing && (tabsPlaceholder || []).filter(tab => tab.props && tab.props.fields).map((tab, index) => /*#__PURE__*/_jsx(\"li\", {\n          className: \"nav-item\",\n          children: /*#__PURE__*/_jsx(\"a\", {\n            className: `nav-link ${index === this.state.activeTabIndex ? 'active' : null}`,\n            onClick: () => this.setActiveTab(index),\n            href: \"#t\",\n            children: /*#__PURE__*/_jsx(Text, {\n              field: tab.props.fields.title\n            })\n          })\n        }, `tab${index}`))\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"p-3 border-left border-right border-bottom\",\n        children: (tabsPlaceholder || []).map(tab => {\n          const isValid = tab.props && tab.props.fields; // allow experience editor markup components to render\n\n          if (!isValid && isEditing) return tab;\n          validTabIndex += 1; // we render the tab either if it's active - or we're editing,\n          // in which case we stack all tabs for visual editing\n\n          if (this.state.activeTabIndex === validTabIndex - 1 || isEditing) {\n            return tab;\n          }\n\n          return null;\n        })\n      })]\n    }));\n  }\n\n} // This is a _higher order component_ that will wrap our component and inject placeholder\n// data into it as a prop (in this case, props.tabsPlaceholder).\n// this another option compared to using the <Placeholder> component;\n// in this case, chosen because we primarily need access to the _data_\n// of the placeholder.\n\n\nconst tabsComponentWithPlaceholderInjected = withPlaceholder({\n  placeholder: 'jss-tabs',\n  prop: 'tabsPlaceholder'\n})(StyleguideLayoutTabs); // We need to know if experience editor is active, to disable the dynamic tab behavior for editing.\n// Using the same technique as injecting the placeholder, we wrap the component again to inject the\n// `sitecoreContext` prop.\n\nconst tabsWithPlaceholderAndSitecoreContext = withSitecoreContext()(tabsComponentWithPlaceholderInjected);\nexport default tabsWithPlaceholderAndSitecoreContext;","map":null,"metadata":{},"sourceType":"module"}