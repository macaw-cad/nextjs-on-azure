{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Placeholder, useSitecoreContext } from '@sitecore-jss/sitecore-jss-nextjs';\n\nvar GraphQLLayout = function GraphQLLayout(_ref) {\n  var rendering = _ref.rendering;\n\n  var _useSitecoreContext = useSitecoreContext(),\n      sitecoreContext = _useSitecoreContext.sitecoreContext;\n\n  var disconnectedMode = sitecoreContext.route && sitecoreContext.route.layoutId === 'available-in-connected-mode';\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"data-e2e-id\": \"graphql-layout\",\n    children: [disconnectedMode && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        children: \"This app is running in disconnected mode. GraphQL requires connected mode, headless connected mode, or integrated mode to work.\"\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"Libraries such as \", /*#__PURE__*/_jsx(\"code\", {\n          children: \"graphql-tools\"\n        }), \" can provide GraphQL API mocking capabilities, which could enable disconnected GraphQL. This is not supported out of the box, however.\"]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"To view the GraphQL samples, restart the app using \", /*#__PURE__*/_jsx(\"code\", {\n          children: \"jss start:connected\"\n        }), \"\\xA0 or deploy the app to Sitecore to run in integrated mode per the JSS documentation.\"]\n      })]\n    }), !disconnectedMode && /*#__PURE__*/_jsx(Placeholder, {\n      name: \"jss-graphql-layout\",\n      rendering: rendering\n    })]\n  });\n};\n\nexport default GraphQLLayout;","map":null,"metadata":{},"sourceType":"module"}