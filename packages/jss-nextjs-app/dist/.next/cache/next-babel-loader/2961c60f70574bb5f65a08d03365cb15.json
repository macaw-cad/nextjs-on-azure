{"ast":null,"code":"import _defineProperty from \"D:/projects/jss/nextjsonazure/packages/jss-nextjs-app-new/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\projects\\\\jss\\\\nextjsonazure\\\\packages\\\\jss-nextjs-app-new\\\\src\\\\components\\\\fields\\\\Styleguide-FieldUsage-ContentList.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Text } from '@sitecore-jss/sitecore-jss-nextjs';\nimport StyleguideSpecimen from 'components/styleguide/Styleguide-Specimen';\n\n/**\r\n * Demonstrates usage of a Content List field type within JSS.\r\n * Content Lists are references to 0..n other content items.\r\n * In Sitecore terms, this maps by default to a Treelist field.\r\n */\nvar StyleguideFieldUsageContentList = function StyleguideFieldUsageContentList(props) {\n  var _props$fields = props.fields,\n      sharedContentList = _props$fields.sharedContentList,\n      localContentList = _props$fields.localContentList;\n  return /*#__PURE__*/_jsxDEV(StyleguideSpecimen, _objectSpread(_objectSpread({}, props), {}, {\n    e2eId: \"styleguide-fieldusage-content-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Shared Content List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, _this), sharedContentList && sharedContentList.map(function (listItem, index) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Field: \", /*#__PURE__*/_jsxDEV(Text, {\n            field: listItem.fields.textField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 22\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, _this)\n      }, \"sharedListItem-\".concat(index), false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Local Content List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, _this), localContentList && localContentList.map(function (listItem, index) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Field: \", /*#__PURE__*/_jsxDEV(Text, {\n            field: listItem.fields.textField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 22\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, _this)\n      }, \"localListItem-\".concat(index), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, _this);\n    })]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = StyleguideFieldUsageContentList;\nexport default StyleguideFieldUsageContentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StyleguideFieldUsageContentList\");","map":{"version":3,"sources":["D:/projects/jss/nextjsonazure/packages/jss-nextjs-app-new/src/components/fields/Styleguide-FieldUsage-ContentList.tsx"],"names":["Text","StyleguideSpecimen","StyleguideFieldUsageContentList","props","fields","sharedContentList","localContentList","map","listItem","index","textField"],"mappings":";;;;;;;;;;AAAA,SAAgBA,IAAhB,QAAkC,mCAAlC;AACA,OAAOC,kBAAP,MAA+B,2CAA/B;;AAWA;AACA;AACA;AACA;AACA;AACA,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CACtCC,KADsC,EAEtB;AAAA,sBACgCA,KAAK,CAACC,MADtC;AAAA,MACRC,iBADQ,iBACRA,iBADQ;AAAA,MACWC,gBADX,iBACWA,gBADX;AAGhB,sBACE,QAAC,kBAAD,kCAAwBH,KAAxB;AAA+B,IAAA,KAAK,EAAC,oCAArC;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAOGE,iBAAiB,IAChBA,iBAAiB,CAACE,GAAlB,CAAsB,UAACC,QAAD,EAAWC,KAAX;AAAA,0BACpB;AAAA,+BAEE;AAAA,6CACS,QAAC,IAAD;AAAM,YAAA,KAAK,EAAED,QAAQ,CAACJ,MAAT,CAAgBM;AAA7B;AAAA;AAAA;AAAA;AAAA,mBADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,kCAA4BD,KAA5B;AAAA;AAAA;AAAA;AAAA,eADoB;AAAA,KAAtB,CARJ,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjBF,EAkBGH,gBAAgB,IACfA,gBAAgB,CAACC,GAAjB,CAAqB,UAACC,QAAD,EAAWC,KAAX;AAAA,0BACnB;AAAA,+BAEE;AAAA,6CACS,QAAC,IAAD;AAAM,YAAA,KAAK,EAAED,QAAQ,CAACJ,MAAT,CAAgBM;AAA7B;AAAA;AAAA;AAAA;AAAA,mBADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,iCAA2BD,KAA3B;AAAA;AAAA;AAAA;AAAA,eADmB;AAAA,KAArB,CAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA8BD,CAnCD;;KAAMP,+B;AAqCN,eAAeA,+BAAf","sourcesContent":["import { Field, Text, Item } from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport StyleguideSpecimen from 'components/styleguide/Styleguide-Specimen';\r\nimport { StyleguideComponentProps, StyleguideSpecimenFields } from 'lib/component-props';\r\n\r\ntype StyleguideFieldUsageContentListProps = StyleguideComponentProps &\r\n  StyleguideSpecimenFields & {\r\n    fields: {\r\n      sharedContentList: Item[];\r\n      localContentList: Item[];\r\n    };\r\n  };\r\n\r\n/**\r\n * Demonstrates usage of a Content List field type within JSS.\r\n * Content Lists are references to 0..n other content items.\r\n * In Sitecore terms, this maps by default to a Treelist field.\r\n */\r\nconst StyleguideFieldUsageContentList = (\r\n  props: StyleguideFieldUsageContentListProps\r\n): JSX.Element => {\r\n  const { sharedContentList, localContentList } = props.fields;\r\n\r\n  return (\r\n    <StyleguideSpecimen {...props} e2eId=\"styleguide-fieldusage-content-list\">\r\n      <h5>Shared Content List</h5>\r\n      {/*\r\n      Content list fields are returned with their value as an array of the referenced items.\r\n      So we can use the .map() array function to traverse them. Ensure a `key` attribute is set\r\n      on each element to make React's DOM updating happy:\r\n     */}\r\n      {sharedContentList &&\r\n        sharedContentList.map((listItem, index) => (\r\n          <div key={`sharedListItem-${index}`}>\r\n            {/* The referenced item's fields can be rendered and edited using normal helper components: */}\r\n            <p>\r\n              Field: <Text field={listItem.fields.textField as Field<string>} />\r\n            </p>\r\n          </div>\r\n        ))}\r\n\r\n      <h5>Local Content List</h5>\r\n      {localContentList &&\r\n        localContentList.map((listItem, index) => (\r\n          <div key={`localListItem-${index}`}>\r\n            {/* The referenced item's fields can be rendered and edited using normal helper components: */}\r\n            <p>\r\n              Field: <Text field={listItem.fields.textField as Field<string>} />\r\n            </p>\r\n          </div>\r\n        ))}\r\n    </StyleguideSpecimen>\r\n  );\r\n};\r\n\r\nexport default StyleguideFieldUsageContentList;\r\n"]},"metadata":{},"sourceType":"module"}