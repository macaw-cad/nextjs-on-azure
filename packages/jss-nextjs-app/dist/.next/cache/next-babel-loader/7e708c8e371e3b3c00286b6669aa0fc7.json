{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\projects\\\\jss\\\\nextjsonazure\\\\packages\\\\jss-nextjs-app\\\\src\\\\components\\\\styleguide\\\\Styleguide-Layout-Tabs.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { withPlaceholder, withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-nextjs';\nimport StyleguideSpecimen from './Styleguide-Specimen';\n\n/**\r\n * Demonstrates advanced component techniques in JSS.\r\n * This example implements a simple-looking tabs component.\r\n * Each tab is itself a child component added to a placeholder defined on the tabs component.\r\n * The tab component introspects its child components to render the tab headings (i.e. the tab children render partial content in two places).\r\n * When this component is edited in Sitecore Experience Editor, the tabbing behavior is turned off and each tab stacks on top of each other\r\n * for easy inline editing.\r\n */\nclass StyleguideLayoutTabs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTabIndex: 0\n    };\n    this.setActiveTab = this.setActiveTab.bind(this);\n  }\n\n  setActiveTab(index) {\n    this.setState({\n      activeTabIndex: index\n    });\n  }\n\n  render() {\n    const {\n      tabsPlaceholder,\n      sitecoreContext\n    } = this.props;\n    let validTabIndex = 0;\n    const isEditing = sitecoreContext && sitecoreContext.pageEditing;\n    return /*#__PURE__*/_jsxDEV(StyleguideSpecimen, _objectSpread(_objectSpread({}, this.props), {}, {\n      e2eId: \"styleguide-layout-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nav nav-tabs\",\n        children: !isEditing && (tabsPlaceholder || []).filter(tab => tab.props && tab.props.fields).map((tab, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"nav-item\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: `nav-link ${index === this.state.activeTabIndex ? 'active' : null}`,\n            onClick: () => this.setActiveTab(index),\n            href: \"#t\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              field: tab.props.fields.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }, this)\n        }, `tab${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 border-left border-right border-bottom\",\n        children: (tabsPlaceholder || []).map(tab => {\n          const isValid = tab.props && tab.props.fields; // allow experience editor markup components to render\n\n          if (!isValid && isEditing) return tab;\n          validTabIndex += 1; // we render the tab either if it's active - or we're editing,\n          // in which case we stack all tabs for visual editing\n\n          if (this.state.activeTabIndex === validTabIndex - 1 || isEditing) {\n            return tab;\n          }\n\n          return null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n} // This is a _higher order component_ that will wrap our component and inject placeholder\n// data into it as a prop (in this case, props.tabsPlaceholder).\n// this another option compared to using the <Placeholder> component;\n// in this case, chosen because we primarily need access to the _data_\n// of the placeholder.\n\n\nconst tabsComponentWithPlaceholderInjected = withPlaceholder({\n  placeholder: 'jss-tabs',\n  prop: 'tabsPlaceholder'\n})(StyleguideLayoutTabs); // We need to know if experience editor is active, to disable the dynamic tab behavior for editing.\n// Using the same technique as injecting the placeholder, we wrap the component again to inject the\n// `sitecoreContext` prop.\n\nconst tabsWithPlaceholderAndSitecoreContext = withSitecoreContext()(tabsComponentWithPlaceholderInjected);\nexport default tabsWithPlaceholderAndSitecoreContext;","map":{"version":3,"sources":["D:/projects/jss/nextjsonazure/packages/jss-nextjs-app/src/components/styleguide/Styleguide-Layout-Tabs.tsx"],"names":["React","withPlaceholder","withSitecoreContext","Text","StyleguideSpecimen","StyleguideLayoutTabs","Component","constructor","props","state","activeTabIndex","setActiveTab","bind","index","setState","render","tabsPlaceholder","sitecoreContext","validTabIndex","isEditing","pageEditing","filter","tab","fields","map","title","isValid","tabsComponentWithPlaceholderInjected","placeholder","prop","tabsWithPlaceholderAndSitecoreContext"],"mappings":"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","sourcesContent":["import React, { ReactElement } from 'react';\r\nimport { withPlaceholder, withSitecoreContext, Text } from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport StyleguideSpecimen from './Styleguide-Specimen';\r\nimport { StyleguideComponentWithContextProps, StyleguideSpecimenFields } from 'lib/component-props';\r\n\r\ninterface StyleguideLayoutTabsState {\r\n  activeTabIndex: number;\r\n}\r\n\r\ntype StyleguideLayoutTabsProps = StyleguideComponentWithContextProps &\r\n  StyleguideSpecimenFields & {\r\n    name: string;\r\n    tabsPlaceholder: ReactElement[];\r\n  };\r\n\r\n/**\r\n * Demonstrates advanced component techniques in JSS.\r\n * This example implements a simple-looking tabs component.\r\n * Each tab is itself a child component added to a placeholder defined on the tabs component.\r\n * The tab component introspects its child components to render the tab headings (i.e. the tab children render partial content in two places).\r\n * When this component is edited in Sitecore Experience Editor, the tabbing behavior is turned off and each tab stacks on top of each other\r\n * for easy inline editing.\r\n */\r\nclass StyleguideLayoutTabs extends React.Component<\r\n  StyleguideLayoutTabsProps,\r\n  StyleguideLayoutTabsState\r\n> {\r\n  constructor(props: StyleguideLayoutTabsProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTabIndex: 0,\r\n    };\r\n\r\n    this.setActiveTab = this.setActiveTab.bind(this);\r\n  }\r\n\r\n  setActiveTab(index: number) {\r\n    this.setState({ activeTabIndex: index });\r\n  }\r\n\r\n  render() {\r\n    const { tabsPlaceholder, sitecoreContext } = this.props;\r\n\r\n    let validTabIndex = 0;\r\n    const isEditing = sitecoreContext && sitecoreContext.pageEditing;\r\n\r\n    return (\r\n      <StyleguideSpecimen {...this.props} e2eId=\"styleguide-layout-tabs\">\r\n        <ul className=\"nav nav-tabs\">\r\n          {/*\r\n            When the page is editing, we hide the tab headings, because they are not updated when xEditor adds or removes a tab rendering.\r\n            Instead, we show the tab header inline with the tab contents (see Styleguide-Layout-Tabs-Tab).\r\n          */}\r\n          {!isEditing &&\r\n            (tabsPlaceholder || [])\r\n              .filter((tab: ReactElement) => tab.props && tab.props.fields)\r\n              .map((tab: ReactElement, index: number) => (\r\n                <li className=\"nav-item\" key={`tab${index}`}>\r\n                  <a\r\n                    className={`nav-link ${index === this.state.activeTabIndex ? 'active' : null}`}\r\n                    onClick={() => this.setActiveTab(index)}\r\n                    href=\"#t\"\r\n                  >\r\n                    <Text field={tab.props.fields.title} />\r\n                  </a>\r\n                </li>\r\n              ))}\r\n        </ul>\r\n        <div className=\"p-3 border-left border-right border-bottom\">\r\n          {(tabsPlaceholder || []).map((tab: ReactElement) => {\r\n            const isValid = tab.props && tab.props.fields;\r\n\r\n            // allow experience editor markup components to render\r\n            if (!isValid && isEditing) return tab;\r\n\r\n            validTabIndex += 1;\r\n\r\n            // we render the tab either if it's active - or we're editing,\r\n            // in which case we stack all tabs for visual editing\r\n            if (this.state.activeTabIndex === validTabIndex - 1 || isEditing) {\r\n              return tab;\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </div>\r\n      </StyleguideSpecimen>\r\n    );\r\n  }\r\n}\r\n\r\n// This is a _higher order component_ that will wrap our component and inject placeholder\r\n// data into it as a prop (in this case, props.tabsPlaceholder).\r\n// this another option compared to using the <Placeholder> component;\r\n// in this case, chosen because we primarily need access to the _data_\r\n// of the placeholder.\r\nconst tabsComponentWithPlaceholderInjected = withPlaceholder({\r\n  placeholder: 'jss-tabs',\r\n  prop: 'tabsPlaceholder',\r\n})(StyleguideLayoutTabs);\r\n\r\n// We need to know if experience editor is active, to disable the dynamic tab behavior for editing.\r\n// Using the same technique as injecting the placeholder, we wrap the component again to inject the\r\n// `sitecoreContext` prop.\r\nconst tabsWithPlaceholderAndSitecoreContext = withSitecoreContext()<StyleguideLayoutTabsProps>(\r\n  tabsComponentWithPlaceholderInjected\r\n);\r\n\r\nexport default tabsWithPlaceholderAndSitecoreContext;\r\n"]},"metadata":{},"sourceType":"module"}