{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nimport { GraphQLSitemapService, DisconnectedSitemapService } from '@sitecore-jss/sitecore-jss-nextjs';\nimport config from 'temp/config';\nimport { config as packageConfig } from '../../package.json';\nexport class SitecoreSitemapFetcher {\n  constructor() {\n    _defineProperty(this, \"_graphqlSitemapService\", void 0);\n\n    _defineProperty(this, \"_disconnectedSitemapService\", void 0);\n\n    this._graphqlSitemapService = new GraphQLSitemapService({\n      endpoint: config.graphQLEndpoint,\n      apiKey: config.sitecoreApiKey,\n      siteName: config.jssAppName\n      /*\r\n      The Sitemap Service needs a root item ID in order to fetch the list of pages for the current\r\n      app. If your Sitecore instance only has 1 JSS App, you can specify the root item ID here;\r\n      otherwise, the service will attempt to figure out the root item for the current JSS App using GraphQL and app name.\r\n      rootItemId: '{GUID}'\r\n      */\n\n    });\n    this._disconnectedSitemapService = new DisconnectedSitemapService(this.getManifest());\n  }\n  /**\r\n   * Get sitecore-import.json manifest\r\n   */\n\n\n  getManifest() {\n    if (process.env.JSS_MODE !== 'disconnected') return null;\n\n    try {\n      const manifest = require('sitecore/manifest/sitecore-import.json');\n\n      return manifest;\n    } catch (error) {\n      throw Error(\"[Disconnected Export] Please make sure you've started the disconnected proxy `npm run start:disconnected-proxy`\");\n    }\n  }\n  /**\r\n   * Generates SitecoreSitemap for given mode (Export / Disconnected Export / SSG)\r\n   * @param {GetStaticPathsContext} context\r\n   */\n\n\n  async fetch(context) {\n    // If we are in Export/Disconnected Export mode\n    if (process.env.EXPORT_MODE) {\n      return process.env.JSS_MODE === 'disconnected' ? this._disconnectedSitemapService.fetchExportSitemap() : this._graphqlSitemapService.fetchExportSitemap(packageConfig.language);\n    }\n\n    return this._graphqlSitemapService.fetchSSGSitemap((context === null || context === void 0 ? void 0 : context.locales) || []);\n  }\n\n}\nexport const sitemapFetcher = new SitecoreSitemapFetcher();","map":{"version":3,"sources":["D:/projects/jss/nextjsonazure/packages/jss-nextjs-app-new/src/lib/sitemap-fetcher.ts"],"names":["GraphQLSitemapService","DisconnectedSitemapService","config","packageConfig","SitecoreSitemapFetcher","constructor","_graphqlSitemapService","endpoint","graphQLEndpoint","apiKey","sitecoreApiKey","siteName","jssAppName","_disconnectedSitemapService","getManifest","process","env","JSS_MODE","manifest","require","error","Error","fetch","context","EXPORT_MODE","fetchExportSitemap","language","fetchSSGSitemap","locales","sitemapFetcher"],"mappings":";;AAAA;AACA,SACEA,qBADF,EAGEC,0BAHF,QAKO,mCALP;AAOA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASA,MAAM,IAAIC,aAAnB,QAAwC,oBAAxC;AAEA,OAAO,MAAMC,sBAAN,CAA6B;AAIlCC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AACZ,SAAKC,sBAAL,GAA8B,IAAIN,qBAAJ,CAA0B;AACtDO,MAAAA,QAAQ,EAAEL,MAAM,CAACM,eADqC;AAEtDC,MAAAA,MAAM,EAAEP,MAAM,CAACQ,cAFuC;AAGtDC,MAAAA,QAAQ,EAAET,MAAM,CAACU;AACjB;AACN;AACA;AACA;AACA;AACA;;AAT4D,KAA1B,CAA9B;AAYA,SAAKC,2BAAL,GAAmC,IAAIZ,0BAAJ,CAChC,KAAKa,WAAL,EADgC,CAAnC;AAGD;AAED;AACF;AACA;;;AACUA,EAAAA,WAAR,GAAsB;AACpB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,cAA7B,EAA6C,OAAO,IAAP;;AAE7C,QAAI;AACF,YAAMC,QAAQ,GAAGC,OAAO,CAAC,wCAAD,CAAxB;;AAEA,aAAOD,QAAP;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACd,YAAMC,KAAK,CACT,iHADS,CAAX;AAGD;AACF;AAED;AACF;AACA;AACA;;;AACE,QAAMC,KAAN,CAAYC,OAAZ,EAAoE;AAClE;AACA,QAAIR,OAAO,CAACC,GAAR,CAAYQ,WAAhB,EAA6B;AAC3B,aAAOT,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,cAAzB,GACH,KAAKJ,2BAAL,CAAiCY,kBAAjC,EADG,GAEH,KAAKnB,sBAAL,CAA4BmB,kBAA5B,CAA+CtB,aAAa,CAACuB,QAA7D,CAFJ;AAGD;;AAED,WAAO,KAAKpB,sBAAL,CAA4BqB,eAA5B,CAA4C,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,OAAT,KAAoB,EAAhE,CAAP;AACD;;AApDiC;AAuDpC,OAAO,MAAMC,cAAc,GAAG,IAAIzB,sBAAJ,EAAvB","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\r\nimport {\r\n  GraphQLSitemapService,\r\n  StaticPath,\r\n  DisconnectedSitemapService,\r\n  ManifestInstance,\r\n} from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport { GetStaticPathsContext } from 'next';\r\nimport config from 'temp/config';\r\nimport { config as packageConfig } from '../../package.json';\r\n\r\nexport class SitecoreSitemapFetcher {\r\n  private _graphqlSitemapService: GraphQLSitemapService;\r\n  private _disconnectedSitemapService: DisconnectedSitemapService;\r\n\r\n  constructor() {\r\n    this._graphqlSitemapService = new GraphQLSitemapService({\r\n      endpoint: config.graphQLEndpoint,\r\n      apiKey: config.sitecoreApiKey,\r\n      siteName: config.jssAppName,\r\n      /*\r\n      The Sitemap Service needs a root item ID in order to fetch the list of pages for the current\r\n      app. If your Sitecore instance only has 1 JSS App, you can specify the root item ID here;\r\n      otherwise, the service will attempt to figure out the root item for the current JSS App using GraphQL and app name.\r\n      rootItemId: '{GUID}'\r\n      */\r\n    });\r\n\r\n    this._disconnectedSitemapService = new DisconnectedSitemapService(\r\n      (this.getManifest() as unknown) as ManifestInstance\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get sitecore-import.json manifest\r\n   */\r\n  private getManifest() {\r\n    if (process.env.JSS_MODE !== 'disconnected') return null;\r\n\r\n    try {\r\n      const manifest = require('sitecore/manifest/sitecore-import.json');\r\n\r\n      return manifest;\r\n    } catch (error) {\r\n      throw Error(\r\n        \"[Disconnected Export] Please make sure you've started the disconnected proxy `npm run start:disconnected-proxy`\"\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates SitecoreSitemap for given mode (Export / Disconnected Export / SSG)\r\n   * @param {GetStaticPathsContext} context\r\n   */\r\n  async fetch(context?: GetStaticPathsContext): Promise<StaticPath[]> {\r\n    // If we are in Export/Disconnected Export mode\r\n    if (process.env.EXPORT_MODE) {\r\n      return process.env.JSS_MODE === 'disconnected'\r\n        ? this._disconnectedSitemapService.fetchExportSitemap()\r\n        : this._graphqlSitemapService.fetchExportSitemap(packageConfig.language);\r\n    }\r\n\r\n    return this._graphqlSitemapService.fetchSSGSitemap(context?.locales || []);\r\n  }\r\n}\r\n\r\nexport const sitemapFetcher = new SitecoreSitemapFetcher();\r\n"]},"metadata":{},"sourceType":"module"}